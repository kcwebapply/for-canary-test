apiVersion: v1
kind: Service
metadata:
  name: sample-app   # アプリに応じて変更
  labels:
    app.kubernetes.io/name: sample-app   # アプリに応じて変更
spec:
  ports:
    - name: http
      port: 80   # アプリに応じて変更
      protocol: TCP
  selector:
    app: sample-app   # アプリに応じて変更
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-canary   # アプリに応じて変更
  labels:
    app.kubernetes.io/name: sample-app   # アプリに応じて変更
spec:
  ports:
    - name: http
      port: 80   # アプリに応じて変更
      protocol: TCP
  selector:
    app: sample-app   # アプリに応じて変更
  type: NodePort
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: sample-app   # アプリに応じて変更
  labels:
    app.kubernetes.io/name: sample-app   # アプリに応じて変更
spec:
  selector:
    matchLabels:
      app: sample-app   # アプリに応じて変更
  strategy:
    canary:
      stableService: sample-app
      canaryService: sample-app-canary
#      trafficRouting:
#        nginx:
#          stableIngress: ingress-rollouts-demo
#          annotationPrefix: nginx.ingress.kubernetes.io
#          additionalIngressAnnotations:
#            use-regex: 'true'
#            canary-by-cookie: "green"
      steps:
        - setCanaryScale:
            weight: 100
        - setWeight: 0
        - pause: { }
      scaleDownDelaySeconds: 120
#  strategy:
#    blueGreen:
#      activeService: sample-app   # アプリに応じて変更
#      previewService: sample-app-canary   # アプリに応じて変更
#      autoPromotionEnabled: true
  template:
    metadata:
      labels:
        app: sample-app   # アプリに応じて変更k
    spec:
      terminationGracePeriodSeconds: 600
      containers:
        - name: sample-app   # アプリに応じて変更
          image: nginx  # アプリに応じて変更
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80   # アプリに応じて変更
#          lifecycle:
#            preStop:
#              exec:
#                command: ["sleep", "5"]
#                # 常駐プロセスの場合は、下記を利用
#                # Sleep時間やtouchするファイルをアプリに応じて変更
##                command: ["sh", "-c", "sleep 30s; touch /app/stop_flg; sleep 20s"]
#          readinessProbe:
#            httpGet:
#              path: /index.html   # アプリに応じて変更
#              port: 80   # アプリに応じて変更
#              scheme: HTTP
##            exec:   # 常駐プロセスの場合はhttpGetでなく、execを利用
##              command: ["ss -plnt | awk '{print $4}' | grep ':80'"]   # 80は適切なポート番号に変更
#            periodSeconds: 10
#            timeoutSeconds: 5
#            successThreshold: 1
#            failureThreshold: 5
#          livenessProbe:
#            httpGet:
#              path: /index.html   # アプリに応じて変更
#              port: 80   # アプリに応じて変更
#              scheme: HTTP
##            exec:   # 常駐プロセスの場合はhttpGetでなく、execを利用
##              command: ["ss -plnt | awk '{print $4}' | grep ':80'"]   # 80は適切なポート番号に変更
#            periodSeconds: 10
#            timeoutSeconds: 5
#            successThreshold: 1
#            failureThreshold: 10